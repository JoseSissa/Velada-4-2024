---
import Layout from "@/layouts/Layout.astro";
import { COMBATS } from "@/const/combats";
import { BOXERS } from "@/const/boxers";
import { type Boxer } from "@/types/Boxer";

const { id } = Astro.params;
const combatData = COMBATS.find((combat) => combat.id === id);
if (!combatData) return new Response(JSON.stringify("Combat not found"), { status: 404 });

const boxersData = combatData.boxers.map((boxerId) => {
	return BOXERS.find((boxer) => boxer.id === boxerId);
})

const renderOnTable: Object = {
    name: {
        label: "",
        concat: undefined
    },
    country : {
        label: "País",
        concat: undefined
    },
    weight: {
        label: "Peso",
        concat: "kg"
    },
    height: {
        label: "Altura",
        concat: "m"
    },
    guard: {
        label: "Guardia",
        concat: undefined
    },
    reach: {
        label: "Alcance",
        concat: "cm"
    },
    age: {
        label: "Edad",
        concat: "años"
    }
}

const middleIndex = boxersData.length / 2
---

<Layout
	title={`Combate número ${combatData.number} de La Velada IV`}
	description={`Combate entre ${combatData.boxers[0]} y ${combatData.boxers[1]}`}
>
    <div class="fixed top-0 left-0 h-screen w-full aspect-video -z-10">
        <video class="w-full h-full object-cover aspect-video" autoplay muted loop>
            <source src={combatData.videoPresentation} type="video/mp4" />
        </video>
    </div>
    <main class="relative z-0">
        <div class="h-[80vh] w-full flex items-center justify-center">
            <img src={`/images/combates/title-${id}.webp`} alt={`Poster del combate entre ${combatData.boxers[0]} y ${combatData.boxers[1]}`}>
        </div>
        <div>
            <h3 class="mb-10 text-2xl text-center text-ice font-bold">CARACTERÍSTICAS</h3>
            <p class="mt-4 text-xl text-neutral-300 text-wrap text-center">Datos relevantes de cada contrincante</p>
            <table class="w-full mt-10 text-center text-white lg:text-lg">
                <tbody>
                    {
                        Object.entries(renderOnTable).map(([key, { label, concat }]) => {                            
                            return (
                                <tr class="mb-10 bg-gradient-to-b from-white/20 via-transparent to-transparent p-4">
                                    {
                                        boxersData.map((boxer, i) => {
                                            if (boxer == null) return null;
                                            return (
                                                <>  
                                                    {key == "name" && (
                                                        <td class="py-3">
                                                            <a href={`/boxer/${boxer.id}`}>
                                                                <img src={`/images/boxers/photoSmall/${boxer.id}-small.webp`} alt={`Foto de ${boxer.name}`} class="h-32 w-auto mx-auto" />
                                                                <span class="font-atomic text-2xl text-accent">{boxer.name}</span>
                                                            </a>
                                                        </td>
                                                    )}
                                                    {key == "country" && (
                                                        <td class="py-3">
                                                            <img src={`/images/flags/${boxer.country}.webp`} alt={`Bandera de ${boxer.country}`} class="h-8 w-auto mx-auto" />
                                                        </td>
                                                    )}
                                                    {key != "name" && key != "country" && (
                                                        <td class="py-3 font-semibold">
                                                            {boxer[key as keyof (typeof boxersData)[0]]}
                                                            {concat}
                                                        </td>
                                                    )}
                                                    {
                                                        i === middleIndex - 1 && <td class="text-primary">{label}</td>
                                                    }
                                                </>
                                            )
                                        })
                                    }
                                </tr>
                            )
                        })
                    }
                </tbody>
            </table>
        </div>
    </main>
</Layout>

<style>
    video {
        mask-image: linear-gradient(to bottom, black 70%, transparent);
    }
</style>