---
import BoxerColumn from "@/components/BoxerColumn.astro";
import PictureBoxerBig from "@/components/PictureBoxerBig.astro";
import { BOXERS } from "@/const/boxers";
import { COUNTRIES } from "@/const/countries";

const listOfBoxers = BOXERS.map((boxer) => {
    const { country } = boxer;
    const countryName = COUNTRIES[country]?.name || "";
    return { ...boxer, countryName };
});

const boxerForDefault = Astro.url.searchParams.get("boxer")
const showBoxerForDefault = listOfBoxers.find(({ id }) => id === boxerForDefault) || listOfBoxers[0]


const columnOfBoxers = [
    listOfBoxers.slice(0, 6),
    listOfBoxers.slice(6, 11),
    listOfBoxers.slice(11, 16),
    listOfBoxers.slice(16, 22),
];

---

<section class="my-40">
    <h3 class="text-center text-5xl font-atomic text-accent">
        ELIGE TU LUCHADOR
    </h3>
    <p class="mt-4 text-xl text-center">Conoce los detalles de cada boxeador</p>

    <div class="md:mt-40 flex flex-col items-center justify-center">
        <article
            class="relative md:absolute w-full flex flex-col items-center justify-center"
        >
            <PictureBoxerBig 
                id={showBoxerForDefault?.id}
                name={showBoxerForDefault?.name}
                country={showBoxerForDefault?.country}
                countryName={showBoxerForDefault?.countryName}
            />
        </article>
        <div class="w-full hidden md:flex justify-between">
            <nav class="flex gap-4">
                <BoxerColumn listOfBoxers={columnOfBoxers[0]} />
                <BoxerColumn
                    listOfBoxers={columnOfBoxers[1]}
                    className="mt-12"
                    reyDeLaPista={true}
                />
            </nav>
            <nav class="flex gap-4">
                <BoxerColumn
                    listOfBoxers={columnOfBoxers[2]}
                    className="mt-12"
                    reyDeLaPista={true}
                />
                <BoxerColumn listOfBoxers={columnOfBoxers[3]} />
            </nav>
        </div>
    </div>
</section>

<script>
    document.addEventListener('astro:page-load', () => {
        const reyPista = document.querySelectorAll(".rey-de-la-pista");
        const boxerLinks = document.querySelectorAll(".boxer-link");
        const boxerPicture = document.querySelector(".boxer-photo") as HTMLPictureElement;
        const boxerCountry = document.querySelector(".boxer-flag") as HTMLImageElement;
        const boxerName = document.querySelector(".boxer-name") as HTMLAnchorElement;
        let previewTarget = undefined as unknown
        let previewAlly = undefined as unknown

        const toggleVersusWordToOpponent = (idOpponent: string) => {
            const boxerVersus = document.querySelector(`[data-id="${idOpponent}"]`);
            boxerVersus?.classList.toggle("opponent");
        }

        const addHoverBoxerSelected = (elem: HTMLElement) => {
            const imageDefault = elem.querySelector("img")
            imageDefault?.classList.toggle("grayscale-0")
            imageDefault?.classList.toggle("zoom-image")
        }

        const toggleAllyWordToAllies = (idAlly: string) => {
            const ally = document.querySelector(`[data-id="${idAlly}"]`)
            ally?.classList.toggle("ally")
        }

        const removeAllBoxerSelected = (target: HTMLElement) => {            
            const imageDefault = target.querySelector("img")
            imageDefault?.classList.remove("grayscale-0", "zoom-image")
            
            boxerLinks.forEach((boxer) => {
                if(boxer.classList.contains("opponent")) {
                    boxer.classList.remove("opponent")
                }
            })
        }

        const changeImageBigOfBoxer = (idBoxerSelected: string, name: string) => {
            const idBoxer = idBoxerSelected.replace(/(^"|"$)/g, '')
            const boxerSrc = `/images/boxers/grande/${idBoxer}-big`;
            
            const pictureSource = boxerPicture.children[0] as HTMLSourceElement;
            const imgPicture = boxerPicture.children[1] as HTMLImageElement;

            pictureSource.srcset = `${boxerSrc}.avif`;
            imgPicture.src = `${boxerSrc}.webp`;
            imgPicture.alt = `FotografÃ­a en grande de ${name}`;
        }

        const changeFlagOfBoxer = (country: string, countryName: string) => {
            boxerCountry.src = `/images/flags/${country}.webp`;
            boxerCountry.alt = `Bandera de ${countryName}`;
        }

        const changeNameOfBoxer = (name: string) => {
            boxerName.textContent = name;
        }

        const addHoverReyDeLaPista = (e: Event) => {
            const currentTarget = e.currentTarget as HTMLElement;
            reyPista.forEach((elem) => {
                elem.classList.add("opponent")
            });
            currentTarget.classList.remove("opponent");
        }
    
        const selectBoxerForDefault = () => {
            const idBoxerForDefault = localStorage.getItem("boxerSelected") ? localStorage.getItem("boxerSelected") : "el-mariana"            
            const boxerForDefault = document.querySelector(`[data-id=${idBoxerForDefault}]`) as HTMLElement            
            const idOpponentForDefault = boxerForDefault?.getAttribute("data-versus")
            
            if(boxerForDefault) {
                const { name, country, countryName } = boxerForDefault.dataset
                addHoverBoxerSelected(boxerForDefault as HTMLElement)
                if(idOpponentForDefault?.includes(",")) {
                    const idAllVersus = idOpponentForDefault.split(",");
                    idAllVersus.forEach((idVersus) => {
                        toggleVersusWordToOpponent(idVersus)
                    });
    
                    const idAllAllies = boxerForDefault?.getAttribute("data-allies")
                    toggleAllyWordToAllies(idAllAllies as string)                
    
                } else {
                    toggleVersusWordToOpponent(idOpponentForDefault as string)
                }
    
                changeImageBigOfBoxer(idBoxerForDefault as string, name as string)
                changeFlagOfBoxer(country as string, countryName as string)
                changeNameOfBoxer(name as string)
            }

        }
    
        boxerLinks.forEach((link) => {
            link.addEventListener("mouseenter", (event) => {
                const currentTarget = event.currentTarget as HTMLElement;
                const { id, name, versus, country, countryName, allies } = currentTarget?.dataset;
    
                previewTarget !== undefined 
                    ? removeAllBoxerSelected(previewTarget as HTMLElement) 
                    : selectBoxerForDefault()  //toggleBoxerDefault()
                previewTarget = currentTarget            
    
                // Add and remove sentence VERSUS of opponents
                addHoverBoxerSelected(currentTarget)

                if (versus?.includes(",")) {                    
                    const multipleVersus = versus.split(",");
                    multipleVersus.forEach((versus) => {
                        toggleVersusWordToOpponent(versus)
                    });
                    
                    if(previewAlly !== undefined) {
                        toggleAllyWordToAllies(previewAlly as string)
                    }
                    toggleAllyWordToAllies(allies as string)
                    previewAlly = allies
                                        
                } else {
                    toggleVersusWordToOpponent(versus as string)

                    if(previewAlly !== undefined) {
                        toggleAllyWordToAllies(previewAlly as string)
                        previewAlly = undefined
                    }
                }
                
                // Change big image of boxer
                changeImageBigOfBoxer(id as string, name as string)
                changeFlagOfBoxer(country as string, countryName as string)    
                if (name) {
                    changeNameOfBoxer(name)
                }

            });
        });

        boxerLinks.forEach((link) => {
            link.addEventListener("click", (event) => {
                const currentTarget = event.currentTarget as HTMLElement;
                const { id } = currentTarget?.dataset;
                
                localStorage.setItem("boxerSelected", JSON.stringify(id))                
                history.replaceState({}, "", `?boxer=${id}`)      
            })
        })
    
        reyPista.forEach((elem) => {
            elem.addEventListener("mouseenter", (e) => {
                addHoverReyDeLaPista(e);
            });
        });
    
        selectBoxerForDefault() // toggleBoxerDefault()
    })
</script>

<style>
    .boxer-photo img {
        filter: drop-shadow(0 0 5px rgba(0, 0, 0, 0.5));
        mask-image: linear-gradient(to bottom, black 70%, transparent 95%);
    }

    .boxer-link {
        background: linear-gradient(
            to bottom,
            rgba(255, 255, 255, 0.1) 0%,
            transparent 40%,
            transparent 100%
        );
    }

    .boxer-link::before {
        content: "";
        position: absolute;
        inset: 0;
        display: block;
        background: linear-gradient(
            to bottom,
            rgba(255, 255, 255, 0.2) 0%,
            transparent 40%,
            transparent 100%
        );
        opacity: 0;
        height: 50%;
        transition:
            opacity 0.2s ease-in-out,
            height 0.2s ease-in-out;
    }

    .boxer-link:hover::before {
        opacity: 0.8;
        height: 90%;
        box-shadow: 0 0px 3px rgba(50, 50, 50, 0.75);
    }

    .boxer-image {
        transition: transform 0.3s ease-in-out;
    }
</style>
