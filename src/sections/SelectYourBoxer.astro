---
import BoxerColumn from "@/components/BoxerColumn.astro";
import PictureBoxerBig from "@/components/PictureBoxerBig.astro";
import { BOXERS } from "@/const/boxers";
import { COUNTRIES } from "@/const/countries";

const listOfBoxers = BOXERS.map((boxer) => {
    const { country } = boxer;
    const countryName = COUNTRIES[country]?.name || "";
    return { ...boxer, countryName };
});

const columnOfBoxers = [
    listOfBoxers.slice(0, 6),
    listOfBoxers.slice(6, 11),
    listOfBoxers.slice(11, 16),
    listOfBoxers.slice(16, 22),
];

---

<section class="my-40">
    <h3 class="text-center text-5xl font-atomic text-accent">
        ELIGE TU LUCHADOR
    </h3>
    <p class="mt-4 text-xl text-center">Conoce los detalles de cada boxeador</p>

    <div class="md:mt-40 flex flex-col items-center justify-center">
        <article
            class="relative md:absolute w-full flex flex-col items-center justify-center"
        >
            <picture class="boxer-photo max-w-[70%] md:max-w-[460px]">
                <source srcset="/images/boxers/grande/el-mariana-big.avif" type="image/avif"/>
                <img
                    class="w-full h-auto object-contain aspect-[285/428]"
                    alt="Fotografía de El Mariana"
                    src="/images/boxers/grande/el-mariana-big.webp"
                />
            </picture>
            <div class="absolute bottom-10 md:bottom-0 flex flex-col items-center">
                <h4 class="text-6xl md:text-8xl mb-4 font-atomic lowercase text-accent boxer-title -skew-y-6 text-center">
                    <a href="" class="boxer-name">El Mariana</a>
                </h4>
                <img
                    class="boxer-flag pointer-events-none aspect-[3/2] h-auto w-28 object-contain object-center"
                    alt="Fotografía de El Mariana"
                    src="/images/flags/mx.webp"
                />
            </div>
        </article>
        <div class="w-full hidden md:flex justify-between">
            <nav class="flex gap-4">
                <BoxerColumn listOfBoxers={columnOfBoxers[0]} />
                <BoxerColumn
                    listOfBoxers={columnOfBoxers[1]}
                    className="mt-12"
                    reyDeLaPista={true}
                />
            </nav>
            <nav class="flex gap-4">
                <BoxerColumn
                    listOfBoxers={columnOfBoxers[2]}
                    className="mt-12"
                    reyDeLaPista={true}
                />
                <BoxerColumn listOfBoxers={columnOfBoxers[3]} />
            </nav>
        </div>
    </div>
</section>

<script>
    document.addEventListener('astro:page-load', () => {
        const reyPista = document.querySelectorAll(".rey-de-la-pista");
        const boxerLinks = document.querySelectorAll(".boxer-link");
        const boxerPicture = document.querySelector(".boxer-photo") as HTMLPictureElement;
        const boxerCountry = document.querySelector(".boxer-flag") as HTMLImageElement;
        const boxerName = document.querySelector(".boxer-name") as HTMLAnchorElement;
        let previewTarget = undefined as unknown
        let previewAlly = undefined as unknown
    
        const toggleBoxerDefault = () => {
            const imageBoxerDefault = boxerLinks[0].querySelector("img")
            const opponentDefaultId = boxerLinks[0].getAttribute("data-versus")
            const opponentDefault = document.querySelector(`[data-id="${opponentDefaultId}"]`)
    
            imageBoxerDefault?.classList.toggle("grayscale-0")
            imageBoxerDefault?.classList.toggle("zoom-image")
            opponentDefault?.classList.toggle("opponent")        
        }
    
        const addVersusWordOpponent = (currentTarget: HTMLElement, idOpponent: string) => {
            const boxerVersus = document.querySelector(`[data-id="${idOpponent}"]`);
            boxerVersus?.classList.add("opponent");
    
            const imageDefault = currentTarget.querySelector("img")
            imageDefault?.classList.add("grayscale-0", "zoom-image")
            return
        }
    
        const removeAllBoxerSelected = (currentTarget: HTMLElement) => {
            const imageDefault = currentTarget.querySelector("img")
            imageDefault?.classList.remove("grayscale-0", "zoom-image")
            
            boxerLinks.forEach((boxer) => {
                if(boxer.classList.contains("opponent")) {
                    boxer.classList.remove("opponent")
                }
            })
        }
    
        const addHoverReyDeLaPista = (e: Event) => {
            const currentTarget = e.currentTarget as HTMLElement;
            reyPista.forEach((elem) => {
                elem.classList.add("opponent")
            });
            currentTarget.classList.remove("opponent");
        }
    
        const toggleBoxerAlly = (allies: string) => {
            const ally = document.querySelector(`[data-id="${allies}"]`)
            ally?.classList.toggle("ally")
        }
    
        boxerLinks.forEach((link) => {        
            link.addEventListener("mouseenter", (event) => {            
                const currentTarget = event.currentTarget as HTMLElement;
                
                const { id, name, versus, country, countryName, allies } = currentTarget?.dataset;
    
                previewTarget !== undefined 
                    ? removeAllBoxerSelected(previewTarget as HTMLElement) 
                    : toggleBoxerDefault()
                previewTarget = currentTarget            
    
                // Add and remove sentence VERSUS of opponents
                if (versus?.includes(",")) {
                    const multipleVersus = versus.split(",");
                    multipleVersus.forEach((versus) => {
                        addVersusWordOpponent(currentTarget, versus)
                    });
                    
                    if(previewAlly !== undefined) {
                        toggleBoxerAlly(previewAlly as string)
                    }
                    toggleBoxerAlly(allies as string)
                    previewAlly = allies
                    
                } else {
                    addVersusWordOpponent(currentTarget, versus as string)
                    if(previewAlly !== undefined) {
                        toggleBoxerAlly(previewAlly as string)
                        previewAlly = undefined
                    }
                }
                
                // Change big image of boxer
                const boxerSrc = `/images/boxers/grande/${id}-big`;
                const pictureSource = boxerPicture.children[0] as HTMLSourceElement;
                const imgPicture = boxerPicture.children[1] as HTMLImageElement;
    
                pictureSource.srcset = `${boxerSrc}.avif`;
                imgPicture.src = `${boxerSrc}.webp`;
                imgPicture.alt = `Fotografía en grande de ${name}`;
    
                if (name) {
                    boxerName.textContent = name;
                }
    
                boxerCountry.src = `/images/flags/${country}.webp`;
                boxerCountry.alt = `Bandera de ${countryName}`;
            });
        });
    
        reyPista.forEach((elem) => {
            elem.addEventListener("mouseenter", (e) => {
                addHoverReyDeLaPista(e);
            });
        });
    
        toggleBoxerDefault()
    })
</script>

<style>
    .boxer-photo img {
        filter: drop-shadow(0 0 5px rgba(0, 0, 0, 0.5));
        mask-image: linear-gradient(to bottom, black 70%, transparent 95%);
    }

    .boxer-link {
        background: linear-gradient(
            to bottom,
            rgba(255, 255, 255, 0.1) 0%,
            transparent 40%,
            transparent 100%
        );
    }

    .boxer-link::before {
        content: "";
        position: absolute;
        inset: 0;
        display: block;
        background: linear-gradient(
            to bottom,
            rgba(255, 255, 255, 0.2) 0%,
            transparent 40%,
            transparent 100%
        );
        opacity: 0;
        height: 50%;
        transition:
            opacity 0.2s ease-in-out,
            height 0.2s ease-in-out;
    }

    .boxer-link:hover::before {
        opacity: 0.8;
        height: 90%;
        box-shadow: 0 0px 3px rgba(50, 50, 50, 0.75);
    }

    .boxer-image {
        transition: transform 0.3s ease-in-out;
    }
</style>
